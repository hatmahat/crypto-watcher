// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package init_module

import (
	"context"
	"crypto-watcher-backend/internal/app/worker"
	"crypto-watcher-backend/internal/config"
	"github.com/google/wire"
	"net/http"
)

// Injectors from wire.go:

func NewWorker(ctx context.Context, cfg *config.Config, httpClient *http.Client) *WorkerWrapper {
	watcherWorkerParam := worker.WatcherWorkerParam{
		Config: cfg,
	}
	watcherWorker := worker.NewWatcherWorker(watcherWorkerParam)
	workerWrapper := NewWorkerWrapper(watcherWorker)
	return workerWrapper
}

// wire.go:

var (
	cfgSet = wire.NewSet(wire.FieldsOf(new(*config.Config), "ServerConfig"), wire.FieldsOf(new(*config.Config), "WorkerConfig"), wire.FieldsOf(new(*config.Config), "SchedulerConfig"), wire.FieldsOf(new(*config.Config), "CoinGeckoConfig"), wire.FieldsOf(new(*config.Config), "WhatsAppConfig"))

	appSet = wire.NewSet(wire.Struct(new(worker.WatcherWorkerParam), "*"), worker.NewWatcherWorker, NewWorkerWrapper,
		NewWorkerGracefulHandler,
	)

	allSet = wire.NewSet(
		appSet,
		cfgSet,
	)
)
